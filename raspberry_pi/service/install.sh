#!/bin/bash

# Script d'installation du service Palazzeti Controller
# Usage: sudo ./install.sh

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier que le script est ex√©cut√© en tant que root
if [ "$EUID" -ne 0 ]; then
    log_error "Ce script doit √™tre ex√©cut√© en tant que root (utilisez sudo)"
    exit 1
fi

log_info "üè≠ Installation du service Palazzeti Controller"
echo "=================================================="

# Variables
SERVICE_NAME="palazzeti-controller"
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"

# D√©tecter automatiquement le r√©pertoire du projet
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$(dirname "$SCRIPT_DIR")")"
SOURCE_DIR="${PROJECT_DIR}/raspberry_pi"
INSTALL_DIR="/opt/palazzeti-controller"
VENV_DIR="${INSTALL_DIR}/venv"
LOG_DIR="/var/log/palazzeti-controller"
SERVICE_SCRIPTS_DIR="${SOURCE_DIR}/service"

# D√©tecter l'utilisateur appropri√©
if id "pi" &>/dev/null; then
    SERVICE_USER="pi"
    SERVICE_GROUP="pi"
    log_info "Utilisateur 'pi' d√©tect√© (Raspberry Pi OS)"
elif [ -n "$SUDO_USER" ]; then
    SERVICE_USER="$SUDO_USER"
    SERVICE_GROUP="$(id -gn $SUDO_USER)"
    log_info "Utilisation de l'utilisateur sudo: $SERVICE_USER"
else
    # Proposer de cr√©er l'utilisateur pi
    echo ""
    read -p "L'utilisateur 'pi' n'existe pas. Voulez-vous le cr√©er ? [Y/n]: " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        SERVICE_USER="root"
        SERVICE_GROUP="root"
        log_warning "Utilisation de root (non recommand√©)"
    else
        log_info "Cr√©ation de l'utilisateur 'pi'..."
        useradd -m -s /bin/bash pi
        usermod -a -G sudo pi
        echo "pi:raspberry" | chpasswd
        log_success "Utilisateur 'pi' cr√©√© avec le mot de passe 'raspberry'"
        SERVICE_USER="pi"
        SERVICE_GROUP="pi"
    fi
fi

log_info "Utilisateur du service: $SERVICE_USER (groupe: $SERVICE_GROUP)"
log_info "üìÅ R√©pertoire du script: $SCRIPT_DIR"
log_info "üìÅ R√©pertoire du projet d√©tect√©: $PROJECT_DIR"

# V√©rifier et configurer les permissions s√©rie
log_info "üîß Configuration des permissions d'acc√®s s√©rie..."
if ! groups $SERVICE_USER | grep -q dialout; then
    log_info "Ajout de l'utilisateur $SERVICE_USER au groupe dialout pour l'acc√®s s√©rie..."
    usermod -a -G dialout $SERVICE_USER
    log_success "Utilisateur ajout√© au groupe dialout"
    log_warning "‚ö†Ô∏è  IMPORTANT: L'utilisateur doit se reconnecter pour que les permissions prennent effet"
else
    log_success "L'utilisateur $SERVICE_USER a d√©j√† acc√®s au groupe dialout"
fi

# V√©rifier que le r√©pertoire du projet existe
if [ ! -d "$PROJECT_DIR" ]; then
    log_error "Le r√©pertoire du projet n'existe pas: $PROJECT_DIR"
    log_info "Assurez-vous que le projet est clon√© dans le bon r√©pertoire"
    exit 1
fi

# V√©rifier que le r√©pertoire raspberry_pi existe
if [ ! -d "$SOURCE_DIR" ]; then
    log_error "Le r√©pertoire raspberry_pi n'existe pas: $SOURCE_DIR"
    exit 1
fi

# V√©rifier que le r√©pertoire service existe
if [ ! -d "$SERVICE_SCRIPTS_DIR" ]; then
    log_error "Le r√©pertoire service n'existe pas: $SERVICE_SCRIPTS_DIR"
    exit 1
fi

log_info "üìÅ R√©pertoire d'installation: $INSTALL_DIR"

# Arr√™ter le service s'il est d√©j√† en cours d'ex√©cution
if systemctl is-active --quiet $SERVICE_NAME; then
    log_info "Arr√™t du service existant..."
    systemctl stop $SERVICE_NAME
fi

# D√©sactiver le service s'il existe
if systemctl is-enabled --quiet $SERVICE_NAME; then
    log_info "D√©sactivation du service existant..."
    systemctl disable $SERVICE_NAME
fi

# Cr√©er le r√©pertoire de logs
log_info "üìÅ Cr√©ation du r√©pertoire de logs: $LOG_DIR"
mkdir -p $LOG_DIR
chown $SERVICE_USER:$SERVICE_GROUP $LOG_DIR
chmod 755 $LOG_DIR

# Cr√©er le r√©pertoire d'installation
log_info "üìÅ Cr√©ation du r√©pertoire d'installation: $INSTALL_DIR"
mkdir -p $INSTALL_DIR
chown $SERVICE_USER:$SERVICE_GROUP $INSTALL_DIR
chmod 755 $INSTALL_DIR

# Copier les fichiers n√©cessaires
log_info "üìã Copie des fichiers de l'application..."
cd $SOURCE_DIR

# Fichiers Python essentiels
cp palazzeti_controller.py $INSTALL_DIR/
cp frame.py $INSTALL_DIR/
cp config.py $INSTALL_DIR/
cp requirements.txt $INSTALL_DIR/

# R√©pertoire templates
if [ -d "templates" ]; then
    cp -r templates $INSTALL_DIR/
fi

log_success "Fichiers copi√©s vers $INSTALL_DIR"

# V√©rifier et cr√©er l'environnement virtuel si n√©cessaire
if [ ! -d "$VENV_DIR" ]; then
    log_info "üì¶ Cr√©ation de l'environnement virtuel Python..."
    cd $INSTALL_DIR
    if [ "$SERVICE_USER" = "root" ]; then
        python3 -m venv venv
    else
        sudo -u $SERVICE_USER python3 -m venv venv
    fi
    log_success "Environnement virtuel cr√©√©"
fi

# Activer l'environnement virtuel et installer les d√©pendances
log_info "üì¶ Installation des d√©pendances Python..."
cd $INSTALL_DIR
if [ "$SERVICE_USER" = "root" ]; then
    $VENV_DIR/bin/pip install --upgrade pip
    $VENV_DIR/bin/pip install -r requirements.txt
else
    sudo -u $SERVICE_USER $VENV_DIR/bin/pip install --upgrade pip
    sudo -u $SERVICE_USER $VENV_DIR/bin/pip install -r requirements.txt
fi
log_success "D√©pendances install√©es"

# Installer la configuration de rotation des logs
log_info "üìÑ Installation de la configuration de rotation des logs..."
if [ -f "$SERVICE_SCRIPTS_DIR/palazzeti-controller.logrotate" ]; then
    cp $SERVICE_SCRIPTS_DIR/palazzeti-controller.logrotate /etc/logrotate.d/palazzeti-controller
    chmod 644 /etc/logrotate.d/palazzeti-controller
    log_success "Configuration de rotation des logs install√©e"
else
    log_warning "Fichier de configuration de rotation des logs non trouv√©"
fi

# Copier et adapter le fichier de service
log_info "üìÑ Installation du fichier de service systemd..."
cp $SERVICE_SCRIPTS_DIR/palazzeti-controller.service $SERVICE_FILE

# Adapter les chemins et l'utilisateur dans le fichier de service
log_info "üîß Configuration des chemins et utilisateur dans le fichier de service..."
sed -i "s|/home/pi/Palazzeti-Controller/raspberry_pi|$INSTALL_DIR|g" $SERVICE_FILE
sed -i "s|User=pi|User=$SERVICE_USER|g" $SERVICE_FILE
sed -i "s|Group=pi|Group=$SERVICE_GROUP|g" $SERVICE_FILE

# Recharger systemd
log_info "üîÑ Rechargement de la configuration systemd..."
systemctl daemon-reload

# Activer le service
log_info "‚úÖ Activation du service..."
systemctl enable $SERVICE_NAME

# D√©marrer le service
log_info "üöÄ D√©marrage du service..."
systemctl start $SERVICE_NAME

# Attendre un peu pour que le service d√©marre
sleep 3

# V√©rifier le statut du service
if systemctl is-active --quiet $SERVICE_NAME; then
    log_success "Service install√© et d√©marr√© avec succ√®s!"
    echo ""
    log_info "üìä Statut du service:"
    systemctl status $SERVICE_NAME --no-pager -l
    echo ""
    log_info "üìã Commandes utiles:"
    echo "  ‚Ä¢ Voir les logs: sudo journalctl -u $SERVICE_NAME -f"
    echo "  ‚Ä¢ Red√©marrer: sudo systemctl restart $SERVICE_NAME"
    echo "  ‚Ä¢ Arr√™ter: sudo systemctl stop $SERVICE_NAME"
    echo "  ‚Ä¢ Statut: sudo systemctl status $SERVICE_NAME"
    echo ""
    log_info "üåê Interface web: http://$(hostname -I | awk '{print $1}'):5000"
else
    log_error "√âchec du d√©marrage du service"
    log_info "V√©rifiez les logs avec: sudo journalctl -u $SERVICE_NAME -f"
    exit 1
fi

log_success "Installation termin√©e!"
